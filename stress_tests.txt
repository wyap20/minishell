[parsing test]
"echo echo"
bash: echo echo: command not found

"ls -la"
bash: ls -la: command not found

"echo ls -la"
bash: echo ls -la: command not found

<< (standalone rdr or pipe)
bash: syntax error near unexpected token [`newline']

*******

[echo tests]

echo -n
(does nothing, should prompt for input again)

echo -n asd
echo -nnnnn asd
asdminishell>

echo -na asd
-na asd

echo -nnnna asd
-nnnna asd

echo --n
--n

echo --n asd
--n asd

echo --nnnn asd
--nnnn asd

echo -n- asd
-n- asd

echo -asd
-asd

echo -
-

echo asd -n
asd -n

echo - asd
- asd

echo - n
- n

echo --n$USERn
--n

echo --n$USER
--n[value]

echo [builtin keywords] (echo, pwd, env, export, unset, exit, cd)
keyword output as string

********
[rdr & pipe tests]

c | <a | ls |<b
-bash: a: No such file or directory
-bash: b: No such file or directory
c: command not found

 <<a <<b wc
> 123
> a
> 1234
> b
      1       1       5

<a >z
-bash: a: No such file or directory
z file not created

>z <a
z file created
-bash: a: No such file or directory

<<a | wc
> 123
> a
      0       0       0

cd [any directory] | echo 123
123
directory not changed

ls -la >z >zz | >zzzz wc >zzz 
all file created
zz will have list of directory
zzz will have       0       0       0

>a >b  ls >c  | <c ls >d 
c: No such file or directory
a b c created with c having ls content
run again >a >b  ls >c  | <c ls >d 
c will be updated with file directory
& file d will be created with same content as cat

<<a <<b <<c
try and Ctrl+D and Ctrl+C in any sequnce
and check $?

<a |>b <c | <d
a c d error message
b created

<a | <c >b | <d
a c d error message
b not created

cat | cat | cat | cat | ls
displays ls, should be waiting for input; pressing enter same times as cat will return to prompt

rm >a z ls x >b y
rm: z: No such file or directory
rm: ls: No such file or directory
rm: x: No such file or directory
rm: y: No such file or directory
a and b created, both empty

ls 123 >z asd
ls: 123: No such file or directory
ls: asd: No such file or directory
z created, empty

test heredoc
Ctrl + C
Ctrl + D
Ctrl + \

********
[expanding tests]

$?
[err_no]

$??
[err_no]?

$ '$' "$" "'$'"
$ $ $ '$'

$$
[shell_pid]
bash expands it to the shell pid, not required by project

$$$
[shell_pid]$

$$$$
[shell_pid][shell_pid]

$?$?
[err_no][err_no]

$? '$?' "$?" "'$?'"
[err_no] $? [err_no] '[err_no]'

$? $?? $?$? ?$? ??$? ??$??
[err_no] [err_no]? [err_no][err_no] ?[err_no] ??[err_no] ??[err_no]?

$US$?ER
[err_no]ER

*repeat with other env variables
*repeat with single lettered variables
*repeat with combination of env variables

export a=asd 
echo $a
asd

*******
[export-unset test]

export a=asd 
env | grep $a [OR] env | grep a=
output should contain "a=asd"

export a=asdf b=$a
echo $a $b
asdf [blank] (b does not take on value of $a yet)
export b=$a
echo $a $b
asdf asdf (b takes value of a)

export a=asdf b=$a
echo $a $b
asdf [blank] (b does not take on value of $a yet)
export a=123123 b=$a
echo $a $b
123123 asdf (a takes on new value; b takes value of a)

export a
export a b c D
export a ab abc abcd
does not export

export a=
adds to env_vars, blank value
export a=123 ab=asd
updates a value, adds ab
export ab=$asd
ab should have no value bc $asd not found and replaced by blank

unset a
should unset successful if exist, else does nothing
unset 
*******

